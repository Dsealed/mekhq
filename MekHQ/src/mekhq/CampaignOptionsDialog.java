/*
 * CampaignOptionsDialog.java
 *
 * Created on August 19, 2009, 11:22 AM
 */

package mekhq;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.Iterator;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFormattedTextField;
import javax.swing.JTable;
import javax.swing.SwingConstants;

import megamek.client.ui.swing.util.PlayerColors;
import megamek.common.Player;
import megamek.common.util.DirectoryItems;
import mekhq.campaign.Campaign;
import mekhq.campaign.CampaignOptions;
import mekhq.campaign.Faction;
import mekhq.campaign.Ranks;

/**
 *
 * @author  Jay Lawson <jaylawson39 at yahoo.com>
 */
public class CampaignOptionsDialog extends javax.swing.JDialog {
	private static final long serialVersionUID = 1935043247792962964L;
	private Campaign campaign;
    private CampaignOptions options;
    private GregorianCalendar date;
    private SimpleDateFormat dateFormat;
    private Frame frame;
    private String camoCategory;
    private String camoFileName;
    private int colorIndex;
    private DirectoryItems camos;
    
    
    /** Creates new form CampaignOptionsDialog */
    public CampaignOptionsDialog(java.awt.Frame parent, boolean modal, Campaign c, DirectoryItems camos) {
        super(parent, modal);
        this.campaign = c;
        this.options = c.getCampaignOptions();
        //this is a hack but I have no idea what is going on here
        this.frame = parent;
        this.date = campaign.calendar;
        dateFormat = new SimpleDateFormat("EEEE, MMMM d yyyy");
        this.camoCategory = campaign.getCamoCategory();
        this.camoFileName = campaign.getCamoFileName();
        this.colorIndex = campaign.getColorIndex();
        this.camos = camos;
        initComponents();
        setCamoIcon();
        setLocationRelativeTo(parent);
        
        // Rules panel
        useFactionModifiersCheckBox.setSelected(options.useFactionModifiers());
        clanPriceModifierJFormattedTextField.setValue(options.getClanPriceModifier());
        useEasierRefitCheckBox.setSelected(options.useEasierRefit());
        useFactionForNamesBox.setSelected(options.useFactionForNames());
        useTacticsBox.setSelected(options.useTactics());
        useInitBonusBox.setSelected(options.useInitBonus());
        useToughnessBox.setSelected(options.useToughness());
        useArtilleryBox.setSelected(options.useArtillery());
        useAbilitiesBox.setSelected(options.useAbilities());
        useEdgeBox.setSelected(options.useEdge());
        useImplantsBox.setSelected(options.useImplants());
        payForPartsBox.setSelected(options.payForParts());
        payForUnitsBox.setSelected(options.payForUnits());
        payForSalariesBox.setSelected(options.payForSalaries());
        payForOverheadBox.setSelected(options.payForOverhead());
        payForMaintainBox.setSelected(options.payForMaintain());
        payForTransportBox.setSelected(options.payForTransport());
        sellUnitsBox.setSelected(options.canSellUnits());
        sellPartsBox.setSelected(options.canSellParts());

        useQuirksBox.setSelected(options.useQuirks());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabOptions = new javax.swing.JTabbedPane();
        panGeneral = new javax.swing.JPanel();
        txtName = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblFaction = new javax.swing.JLabel();
        lblFactionNames = new javax.swing.JLabel();
        lblRank = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        btnDate = new javax.swing.JButton();
        comboFaction = new javax.swing.JComboBox();
        comboFactionNames = new javax.swing.JComboBox();
        comboRanks = new javax.swing.JComboBox();
        sldGender = new javax.swing.JSlider(SwingConstants.HORIZONTAL);
        btnCamo = new javax.swing.JButton();
        lblCamo = new javax.swing.JLabel();
        panRepair = new javax.swing.JPanel();
        panPersonnel = new javax.swing.JPanel();
        panFinances = new javax.swing.JPanel();
        panNameGen = new javax.swing.JPanel();
        panRank = new javax.swing.JPanel();
        panXP = new javax.swing.JPanel();
        useFactionModifiersCheckBox = new javax.swing.JCheckBox();
        javax.swing.JLabel clanPriceModifierLabel = new javax.swing.JLabel();
        DecimalFormat numberFormat = (DecimalFormat) DecimalFormat.getInstance();
        numberFormat.setMaximumFractionDigits(2);
        DecimalFormatSymbols decimalFormatSymbols = new DecimalFormatSymbols();
        decimalFormatSymbols.setGroupingSeparator(' ');
        decimalFormatSymbols.setDecimalSeparator('.');
        numberFormat.setDecimalFormatSymbols(decimalFormatSymbols);
        clanPriceModifierJFormattedTextField = new JFormattedTextField(numberFormat);
        useEasierRefitCheckBox = new javax.swing.JCheckBox();
        useFactionForNamesBox = new javax.swing.JCheckBox();
        useTacticsBox = new javax.swing.JCheckBox();
        useInitBonusBox = new javax.swing.JCheckBox();
        useToughnessBox = new javax.swing.JCheckBox();
        useArtilleryBox = new javax.swing.JCheckBox();
        useAbilitiesBox = new javax.swing.JCheckBox();
        useEdgeBox = new javax.swing.JCheckBox();
        useImplantsBox = new javax.swing.JCheckBox();
        payForPartsBox = new javax.swing.JCheckBox();
        payForUnitsBox = new javax.swing.JCheckBox();
        payForSalariesBox = new javax.swing.JCheckBox();
        payForOverheadBox = new javax.swing.JCheckBox();
        payForMaintainBox = new javax.swing.JCheckBox();
        payForTransportBox = new javax.swing.JCheckBox();
        sellUnitsBox = new javax.swing.JCheckBox();
        sellPartsBox = new javax.swing.JCheckBox();
        useQuirksBox = new javax.swing.JCheckBox();
        repairSystemComboBox = new javax.swing.JComboBox();
        javax.swing.JLabel repairSystemComboBoxLabel = new javax.swing.JLabel();
        chkUseFinances = new javax.swing.JCheckBox();
        btnOkay = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        textRanks = new javax.swing.JTextArea();
        scrRanks = new javax.swing.JScrollPane();

        textCustomRanks = new javax.swing.JTextArea();
        checkCustomRanks = new javax.swing.JCheckBox();
        testCustomRanks = new javax.swing.JButton();
        scrCustomRanks = new javax.swing.JScrollPane();
        choiceOfficerCut = new javax.swing.JComboBox();
        lblOfficerCut = new javax.swing.JLabel();

        
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        tabOptions.setName("tabOptions"); // NOI18N

        panGeneral.setName("panGeneral"); // NOI18N
        panGeneral.setLayout(new java.awt.GridBagLayout());

        txtName.setText(campaign.getName());
        txtName.setMinimumSize(new java.awt.Dimension(500, 30));
        txtName.setName("txtName"); // NOI18N
        txtName.setPreferredSize(new java.awt.Dimension(500, 30));
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panGeneral.add(txtName, gridBagConstraints);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mekhq.MekHQApp.class).getContext().getResourceMap(CampaignOptionsDialog.class);
        lblName.setText(resourceMap.getString("lblName.text")); // NOI18N
        lblName.setName("lblName"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panGeneral.add(lblName, gridBagConstraints);

        lblFaction.setText(resourceMap.getString("lblFaction.text")); // NOI18N
        lblFaction.setName("lblFaction"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panGeneral.add(lblFaction, gridBagConstraints);
        
        lblDate.setText(resourceMap.getString("lblDate.text")); // NOI18N
        lblDate.setName("lblDate"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panGeneral.add(lblDate, gridBagConstraints);

        btnDate.setText(getDateAsString());
        btnDate.setMinimumSize(new java.awt.Dimension(400, 30));
        btnDate.setName("btnDate"); // NOI18N
        btnDate.setPreferredSize(new java.awt.Dimension(400, 30));
        btnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panGeneral.add(btnDate, gridBagConstraints);

        DefaultComboBoxModel factionModel = new DefaultComboBoxModel();
        for(int i = 0; i < Faction.F_NUM; i++) {
            factionModel.addElement(Faction.getFactionName(i));
        }
        factionModel.setSelectedItem(campaign.getFactionName());
        comboFaction.setModel(factionModel);
        comboFaction.setMinimumSize(new java.awt.Dimension(400, 30));
        comboFaction.setName("comboFaction"); // NOI18N
        comboFaction.setPreferredSize(new java.awt.Dimension(400, 30));
        comboFaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factionSelected();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panGeneral.add(comboFaction, gridBagConstraints);

        btnCamo.setMaximumSize(new java.awt.Dimension(84, 72));
        btnCamo.setMinimumSize(new java.awt.Dimension(84, 72));
        btnCamo.setName("btnCamo"); // NOI18N
        btnCamo.setPreferredSize(new java.awt.Dimension(84, 72));
        btnCamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panGeneral.add(btnCamo, gridBagConstraints);

        lblCamo.setText(resourceMap.getString("lblCamo.text")); // NOI18N
        lblCamo.setName("lblCamo"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panGeneral.add(lblCamo, gridBagConstraints);

        tabOptions.addTab(resourceMap.getString("panGeneral.TabConstraints.tabTitle"), panGeneral); // NOI18N

        panRepair.setName("panRules"); // NOI18N
        panRepair.setLayout(new java.awt.GridBagLayout());

        useFactionModifiersCheckBox.setText(resourceMap.getString("useFactionModifiersCheckBox.text")); // NOI18N
        useFactionModifiersCheckBox.setToolTipText(resourceMap.getString("useFactionModifiersCheckBox.toolTipText")); // NOI18N
        useFactionModifiersCheckBox.setName("useFactionModifiersCheckBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panRepair.add(useFactionModifiersCheckBox, gridBagConstraints);

        clanPriceModifierLabel.setText(resourceMap.getString("clanPriceModifierLabel.text")); // NOI18N
        clanPriceModifierLabel.setName("clanPriceModifierLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRepair.add(clanPriceModifierLabel, gridBagConstraints);

        clanPriceModifierJFormattedTextField.setColumns(4);
        clanPriceModifierJFormattedTextField.setToolTipText(resourceMap.getString("clanPriceModifierJFormattedTextField.toolTipText")); // NOI18N
        clanPriceModifierJFormattedTextField.setName("clanPriceModifierJFormattedTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRepair.add(clanPriceModifierJFormattedTextField, gridBagConstraints);

        useEasierRefitCheckBox.setText(resourceMap.getString("useEasierRefitCheckBox.text")); // NOI18N
        useEasierRefitCheckBox.setToolTipText(resourceMap.getString("useEasierRefitCheckBox.toolTipText")); // NOI18N
        useEasierRefitCheckBox.setName("useEasierRefitCheckBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panRepair.add(useEasierRefitCheckBox, gridBagConstraints);

        DefaultComboBoxModel repairSystemComboBoxModel = new DefaultComboBoxModel();
        for (int i=0;i<CampaignOptions.REPAIR_SYSTEM_NAMES.length; i++) {
            repairSystemComboBoxModel.addElement(CampaignOptions.getRepairSystemName(i));
        }
        repairSystemComboBox.setModel(repairSystemComboBoxModel);
        repairSystemComboBox.setToolTipText(resourceMap.getString("repairSystemComboBox.toolTipText")); // NOI18N
        repairSystemComboBox.setName("repairSystemComboBox"); // NOI18N
        repairSystemComboBox.setSelectedIndex(options.getRepairSystem());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panRepair.add(repairSystemComboBox, gridBagConstraints);

        repairSystemComboBoxLabel.setText(resourceMap.getString("repairSystemComboBoxLabel.text")); // NOI18N
        repairSystemComboBoxLabel.setName("repairSystemComboBoxLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRepair.add(repairSystemComboBoxLabel, gridBagConstraints);

        chkUseFinances.setText(resourceMap.getString("chkUseFinances.text")); // NOI18N
        chkUseFinances.setName("chkUseFinances"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panRepair.add(chkUseFinances, gridBagConstraints);

        useQuirksBox.setText(resourceMap.getString("useQuirksBox.text")); // NOI18N
        useQuirksBox.setToolTipText(resourceMap.getString("useQuirksBox.toolTipText")); // NOI18N
        useQuirksBox.setName("useQuirksBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panRepair.add(useQuirksBox, gridBagConstraints);

        
        tabOptions.addTab(resourceMap.getString("panRepair.TabConstraints.tabTitle"), panRepair); // NOI18N

        panPersonnel.setName("panPersonnel"); // NOI18N
        panPersonnel.setLayout(new java.awt.GridBagLayout());
        
        useTacticsBox.setText(resourceMap.getString("useTacticsBox.text")); // NOI18N
        useTacticsBox.setToolTipText(resourceMap.getString("useTacticsBox.toolTipText")); // NOI18N
        useTacticsBox.setName("useTacticsBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panPersonnel.add(useTacticsBox, gridBagConstraints);
        
        useInitBonusBox.setText(resourceMap.getString("useInitBonusBox.text")); // NOI18N
        useInitBonusBox.setToolTipText(resourceMap.getString("useInitBonusBox.toolTipText")); // NOI18N
        useInitBonusBox.setName("useInitBonusBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panPersonnel.add(useInitBonusBox, gridBagConstraints);
        
        useToughnessBox.setText(resourceMap.getString("useToughnessBox.text")); // NOI18N
        useToughnessBox.setToolTipText(resourceMap.getString("useToughnessBox.toolTipText")); // NOI18N
        useToughnessBox.setName("useToughnessBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panPersonnel.add(useToughnessBox, gridBagConstraints);
        
        useArtilleryBox.setText(resourceMap.getString("useArtilleryBox.text")); // NOI18N
        useArtilleryBox.setToolTipText(resourceMap.getString("useArtilleryBox.toolTipText")); // NOI18N
        useArtilleryBox.setName("useArtilleryBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panPersonnel.add(useArtilleryBox, gridBagConstraints);
        
        useAbilitiesBox.setText(resourceMap.getString("useAbilitiesBox.text")); // NOI18N
        useAbilitiesBox.setToolTipText(resourceMap.getString("useAbilitiesBox.toolTipText")); // NOI18N
        useAbilitiesBox.setName("useAbilitiesBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panPersonnel.add(useAbilitiesBox, gridBagConstraints);
        
        useEdgeBox.setText(resourceMap.getString("useEdgeBox.text")); // NOI18N
        useEdgeBox.setToolTipText(resourceMap.getString("useEdgeBox.toolTipText")); // NOI18N
        useEdgeBox.setName("useEdgeBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panPersonnel.add(useEdgeBox, gridBagConstraints);
        
        useImplantsBox.setText(resourceMap.getString("useImplantsBox.text")); // NOI18N
        useImplantsBox.setToolTipText(resourceMap.getString("useImplantsBox.toolTipText")); // NOI18N
        useImplantsBox.setName("useImplantsBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panPersonnel.add(useImplantsBox, gridBagConstraints);
        
        tabOptions.addTab(resourceMap.getString("panPersonnel.TabConstraints.tabTitle"), panPersonnel); // NOI18N

        panFinances.setName("panFinances"); // NOI18N
        panFinances.setLayout(new java.awt.GridBagLayout());
        
        payForPartsBox.setText(resourceMap.getString("payForPartsBox.text")); // NOI18N
        payForPartsBox.setToolTipText(resourceMap.getString("payForPartsBox.toolTipText")); // NOI18N
        payForPartsBox.setName("payForPartsBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFinances.add(payForPartsBox, gridBagConstraints);
        
        payForUnitsBox.setText(resourceMap.getString("payForUnitsBox.text")); // NOI18N
        payForUnitsBox.setToolTipText(resourceMap.getString("payForUnitsBox.toolTipText")); // NOI18N
        payForUnitsBox.setName("payForUnitsBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFinances.add(payForUnitsBox, gridBagConstraints);
        
        payForSalariesBox.setText(resourceMap.getString("payForSalariesBox.text")); // NOI18N
        payForSalariesBox.setToolTipText(resourceMap.getString("payForSalariesBox.toolTipText")); // NOI18N
        payForSalariesBox.setName("payForSalariesBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFinances.add(payForSalariesBox, gridBagConstraints);
        
        payForOverheadBox.setText(resourceMap.getString("payForOverheadBox.text")); // NOI18N
        payForOverheadBox.setToolTipText(resourceMap.getString("payForOverheadBox.toolTipText")); // NOI18N
        payForOverheadBox.setName("payForOverheadBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFinances.add(payForOverheadBox, gridBagConstraints);
        
        payForMaintainBox.setText(resourceMap.getString("payForMaintainBox.text")); // NOI18N
        payForMaintainBox.setToolTipText(resourceMap.getString("payForMaintainBox.toolTipText")); // NOI18N
        payForMaintainBox.setName("payForMaintainBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFinances.add(payForMaintainBox, gridBagConstraints);
        
        payForTransportBox.setText(resourceMap.getString("payForTransportBox.text")); // NOI18N
        payForTransportBox.setToolTipText(resourceMap.getString("payForTransportBox.toolTipText")); // NOI18N
        payForTransportBox.setName("payForTransportBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFinances.add(payForTransportBox, gridBagConstraints);
        
        sellUnitsBox.setText(resourceMap.getString("sellUnitsBox.text")); // NOI18N
        sellUnitsBox.setToolTipText(resourceMap.getString("sellUnitsBox.toolTipText")); // NOI18N
        sellUnitsBox.setName("sellUnitsBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFinances.add(sellUnitsBox, gridBagConstraints);
        
        sellPartsBox.setText(resourceMap.getString("sellPartsBox.text")); // NOI18N
        sellPartsBox.setToolTipText(resourceMap.getString("sellPartsBox.toolTipText")); // NOI18N
        sellPartsBox.setName("sellPartsBox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFinances.add(sellPartsBox, gridBagConstraints);
        
        tabOptions.addTab(resourceMap.getString("panFinances.TabConstraints.tabTitle"), panFinances); // NOI18N
        
        panXP.setName("panXP"); // NOI18N
        panXP.setLayout(new java.awt.GridBagLayout());
        
        tableXP = new JTable(campaign.getSkillCosts().getSkillArray(), campaign.getSkillCosts().getSkillTitles());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panXP.add(tableXP, gridBagConstraints);      
        tabOptions.addTab(resourceMap.getString("panXP.TabConstraints.tabTitle"), panXP); // NOI18N
        
        panRank.setName("panRank"); // NOI18N
        panRank.setLayout(new java.awt.GridBagLayout());
        
        lblRank.setText(resourceMap.getString("lblRank.text")); // NOI18N
        lblRank.setName("lblRank"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRank.add(lblRank, gridBagConstraints);      
        
        DefaultComboBoxModel rankModel = new DefaultComboBoxModel();
        for(int i = 0; i < Ranks.RS_NUM; i++) {
            rankModel.addElement(Ranks.getRankSystemName(i));
        }
        if(campaign.getRanks().getRankSystem() == Ranks.RS_CUSTOM) {
        	rankModel.setSelectedItem(Ranks.getRankSystemName(Ranks.RS_SL));
        	comboRanks.setEnabled(false);
        	checkCustomRanks.setSelected(true);
        	testCustomRanks.setEnabled(true);
			textCustomRanks.setEnabled(true);
			choiceOfficerCut.setEnabled(true);
        	textCustomRanks.setText(campaign.getRanks().getRankNameList());
        } else {
        	rankModel.setSelectedItem(Ranks.getRankSystemName(campaign.getRanks().getRankSystem()));
        	checkCustomRanks.setSelected(false);
           	testCustomRanks.setEnabled(false);
			textCustomRanks.setEnabled(false);
			choiceOfficerCut.setEnabled(false);
        }
        comboRanks.setModel(rankModel);
        comboRanks.setName("comboRanks"); // NOI18N
        comboRanks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillRankInfo();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRank.add(comboRanks, gridBagConstraints);

        checkCustomRanks.setText(resourceMap.getString("checkCustomRanks.text"));
        checkCustomRanks.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent evt) {
				fillRankInfo();
				if(checkCustomRanks.isSelected()) {
					comboRanks.setEnabled(false);
					textCustomRanks.setEnabled(true);
					testCustomRanks.setEnabled(true);
					choiceOfficerCut.setEnabled(true);
				} else {
					comboRanks.setEnabled(true);
					testCustomRanks.setEnabled(false);
					textCustomRanks.setEnabled(false);
					choiceOfficerCut.setEnabled(false);
				}
			}
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panRank.add(checkCustomRanks, gridBagConstraints);
        
        testCustomRanks.setText(resourceMap.getString("testCustomRanks.text"));
        testCustomRanks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	fillRankInfo();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panRank.add(testCustomRanks, gridBagConstraints);
        
        textCustomRanks.setToolTipText(resourceMap.getString("textCustomRanks.toolTipText"));
        textCustomRanks.setEditable(true);
        textCustomRanks.setLineWrap(true);
        textCustomRanks.setWrapStyleWord(true);
        scrCustomRanks.setViewportView(textCustomRanks);
        scrCustomRanks.setPreferredSize(new Dimension(150,100));
        scrCustomRanks.setMinimumSize(new Dimension(150,100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weighty = 0.0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panRank.add(scrCustomRanks, gridBagConstraints);
    
        lblOfficerCut.setText(resourceMap.getString("lblOfficerCut.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panRank.add(lblOfficerCut, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panRank.add(choiceOfficerCut, gridBagConstraints);
        
        fillRankInfo();
        textRanks.setEditable(false);
        scrRanks.setViewportView(textRanks);
    	
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.gridheight = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		panRank.add(scrRanks, gridBagConstraints);
        
        tabOptions.addTab(resourceMap.getString("panRank.TabConstraints.tabTitle"), panRank); // NOI18N
        
        panNameGen.setName("panNameGen"); // NOI18N
        panNameGen.setLayout(new java.awt.GridBagLayout());
        
        useFactionForNamesBox.setText(resourceMap.getString("useFactionForNamesBox.text")); // NOI18N
        useFactionForNamesBox.setToolTipText(resourceMap.getString("useFactionForNamesBox.toolTipText")); // NOI18N
        useFactionForNamesBox.setName("useFactionForNamesBox"); // NOI18N
        useFactionForNamesBox.setSelected(campaign.getCampaignOptions().useFactionForNames());
        useFactionForNamesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useFactionForNamesBoxEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panNameGen.add(useFactionForNamesBox, gridBagConstraints);

        
        lblFactionNames.setText(resourceMap.getString("lblFactionNames.text")); // NOI18N
        lblFactionNames.setName("lblFactionNames"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panNameGen.add(lblFactionNames, gridBagConstraints);
        
        DefaultComboBoxModel factionNamesModel = new DefaultComboBoxModel();
        for (Iterator<String> i = campaign.getRNG().getFactions(); i.hasNext(); ) {
            String faction = (String) i.next();
            factionNamesModel.addElement(faction);
        }
        factionNamesModel.setSelectedItem(campaign.getRNG().getChosenFaction());
        comboFactionNames.setModel(factionNamesModel);
        comboFactionNames.setMinimumSize(new java.awt.Dimension(400, 30));
        comboFactionNames.setName("comboFactionNames"); // NOI18N
        comboFactionNames.setPreferredSize(new java.awt.Dimension(400, 30));
        comboFactionNames.setEnabled(!useFactionForNamesBox.isSelected());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panNameGen.add(comboFactionNames, gridBagConstraints);
        
        lblGender.setText(resourceMap.getString("lblGender.text")); // NOI18N
        lblGender.setName("lblGender"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panNameGen.add(lblGender, gridBagConstraints);
              
        sldGender.setMaximum(100);
        sldGender.setMinimum(0);
        sldGender.setMajorTickSpacing(25);
        sldGender.setPaintTicks(true);
        sldGender.setPaintLabels(true);
        sldGender.setValue(campaign.getRNG().getPercentFemale());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panNameGen.add(sldGender, gridBagConstraints);
        
        tabOptions.addTab(resourceMap.getString("panNameGen.TabConstraints.tabTitle"), panNameGen); // NOI18N
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(tabOptions, gridBagConstraints);

        btnOkay.setText(resourceMap.getString("btnOkay.text")); // NOI18N
        btnOkay.setName("btnOkay"); // NOI18N
        btnOkay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        getContentPane().add(btnOkay, gridBagConstraints);

        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        getContentPane().add(btnCancel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_txtNameActionPerformed

	private void factionSelected() {
		if(useFactionForNamesBox.isSelected()) {
			switchFaction();
		}		
	}

	private void switchFaction() {
		String factionCode = Faction.getFactionCodeForNameGenerator(comboFaction.getSelectedIndex());
		boolean found = false;
		for (Iterator<String> i = campaign.getRNG().getFactions(); i.hasNext(); ) {
            String nextFaction = (String) i.next();
            if(nextFaction.equals(factionCode)) {
            	found = true;
            	break;
            }
        }
		if(found) {
			comboFactionNames.setSelectedItem(factionCode);
		}
	}
	
	private void fillRankInfo() {
		String ranks = "";
		if(checkCustomRanks.isSelected()) {
			DefaultComboBoxModel officerModel = new DefaultComboBoxModel();
			String[] customRanks = textCustomRanks.getText().split(",");
			for(String r : customRanks) {
				r = r.trim();
				ranks = ranks + r + "\n";
				officerModel.addElement(r);
			}
			choiceOfficerCut.setModel(officerModel);
			if(campaign.getRanks().getOfficerCut() < officerModel.getSize()) {
				choiceOfficerCut.setSelectedIndex(campaign.getRanks().getOfficerCut());
			} else if(officerModel.getSize() > 0){
				choiceOfficerCut.setSelectedIndex(0);
			}
		} else {
			for(String r : Ranks.getRankSystem(comboRanks.getSelectedIndex())) {
				ranks = ranks + r + "\n";
			}
		}
		textRanks.setText(ranks);
	}
	
	private void useFactionForNamesBoxEvent(java.awt.event.ActionEvent evt) {
		if(useFactionForNamesBox.isSelected()) {
			comboFactionNames.setEnabled(false);
			switchFaction();
		} else {
			comboFactionNames.setEnabled(true);
		}
	}

private void btnOkayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkayActionPerformed
    if(txtName.getText().length() > 0) {
        campaign.setName(txtName.getText());
        this.setVisible(false);
    }
    campaign.calendar = date;
    campaign.setFaction(comboFaction.getSelectedIndex());
    if(null != comboFactionNames.getSelectedItem()) {
    	campaign.getRNG().setChosenFaction((String)comboFactionNames.getSelectedItem());
    }
    campaign.getRNG().setPerentFemale(sldGender.getValue());
    if(checkCustomRanks.isSelected()) {
    	ArrayList<String> customRanks = new ArrayList<String>();
    	String[] customRankNames = textCustomRanks.getText().split(",");
		for(String name : customRankNames) {
			name = name.trim();
			customRanks.add(name);
		}
		if(customRanks.size() > 0) {
			campaign.getRanks().setCustomRanks(customRanks, choiceOfficerCut.getSelectedIndex());
		}
    } else {
    	if(campaign.getRanks().getRankSystem() != comboRanks.getSelectedIndex()) {
    		campaign.setRankSystem(comboRanks.getSelectedIndex());
    	}
    }
    campaign.setCamoCategory(camoCategory);
    campaign.setCamoFileName(camoFileName);
    campaign.setColorIndex(colorIndex);
    
    // Rules panel
    options.setFactionModifiers(useFactionModifiersCheckBox.isSelected());
    String clanPriceModifierString = clanPriceModifierJFormattedTextField.getText();
    options.setClanPriceModifier(new Double(clanPriceModifierString));
    options.setEasierRefit(useEasierRefitCheckBox.isSelected());
    options.setFactionForNames(useFactionForNamesBox.isSelected());
    options.setRepairSystem(repairSystemComboBox.getSelectedIndex());
    
    options.setTactics(useTacticsBox.isSelected());
    options.setInitBonus(useInitBonusBox.isSelected());
    options.setToughness(useToughnessBox.isSelected());
    options.setArtillery(useArtilleryBox.isSelected());
    options.setAbilities(useAbilitiesBox.isSelected());
    options.setEdge(useEdgeBox.isSelected());
    options.setImplants(useImplantsBox.isSelected());
    options.setPayForParts(payForPartsBox.isSelected());
    options.setPayForUnits(payForUnitsBox.isSelected());
    options.setPayForSalaries(payForSalariesBox.isSelected());
    options.setPayForOverhead(payForOverheadBox.isSelected());
    options.setPayForMaintain(payForMaintainBox.isSelected());
    options.setPayForTransport(payForTransportBox.isSelected());
    options.setSellUnits(sellUnitsBox.isSelected());
    options.setSellParts(sellPartsBox.isSelected());

    options.setQuirks(useQuirksBox.isSelected());
    
    //campaign.refreshAllUnitDiagnostics();
}//GEN-LAST:event_btnOkayActionPerformed

private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
    this.setVisible(false);
}//GEN-LAST:event_btnCancelActionPerformed

private void btnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDateActionPerformed
    // show the date chooser
    DateChooser dc = new DateChooser(frame, date);
    // user can eiter choose a date or cancel by closing
    if (dc.showDateChooser() == DateChooser.OK_OPTION) {
        date = dc.getDate();
        btnDate.setText(getDateAsString());
    }
}//GEN-LAST:event_btnDateActionPerformed

private void btnCamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamoActionPerformed
    CamoChoiceDialog ccd = new CamoChoiceDialog(frame, true, camoCategory, camoFileName, colorIndex, camos);
    ccd.setVisible(true);
    camoCategory = ccd.getCategory();
    camoFileName = ccd.getFileName();
    if(ccd.getColorIndex() != -1) {
        colorIndex = ccd.getColorIndex();
    }
    setCamoIcon();
}//GEN-LAST:event_btnCamoActionPerformed

public String getDateAsString() {
    return dateFormat.format(date.getTime());
}

    public void setCamoIcon() {
        if (null == camoCategory) {
            return;
        }
        
        if(Player.NO_CAMO.equals(camoCategory)) {
            int colorInd = colorIndex;
            if (colorInd == -1) {
                colorInd = 0;
            }
            BufferedImage tempImage = new BufferedImage(84, 72,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D graphics = tempImage.createGraphics();
            graphics.setColor(PlayerColors.getColor(colorInd));
            graphics.fillRect(0, 0, 84, 72);
            btnCamo.setIcon(new ImageIcon(tempImage));
            return;
        }

        // Try to get the camo file.
        try {

            // Translate the root camo directory name.
            if (Player.ROOT_CAMO.equals(camoCategory))
                camoCategory = ""; //$NON-NLS-1$
            Image camo = (Image) camos.getItem(camoCategory, camoFileName);
            btnCamo.setIcon(new ImageIcon(camo));
        } catch (Exception err) {
            err.printStackTrace();
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CampaignOptionsDialog dialog = new CampaignOptionsDialog(new javax.swing.JFrame(), true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCamo;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDate;
    private javax.swing.JButton btnOkay;
    private javax.swing.JCheckBox chkUseFinances;
    private javax.swing.JFormattedTextField clanPriceModifierJFormattedTextField;
    private javax.swing.JComboBox comboFaction;
    private javax.swing.JComboBox comboFactionNames;
    private javax.swing.JComboBox comboRanks;
    private javax.swing.JSlider sldGender;
    private javax.swing.JLabel lblCamo;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFaction;
    private javax.swing.JLabel lblFactionNames;
    private javax.swing.JLabel lblRank;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblName;
    private javax.swing.JPanel panGeneral;
    private javax.swing.JPanel panRepair;
    private javax.swing.JPanel panPersonnel;
    private javax.swing.JPanel panFinances;
    private javax.swing.JPanel panNameGen;
    private javax.swing.JPanel panXP;
    private javax.swing.JPanel panRank;
    private javax.swing.JComboBox repairSystemComboBox;
    private javax.swing.JTabbedPane tabOptions;
    private javax.swing.JTextField txtName;
    private javax.swing.JCheckBox useEasierRefitCheckBox;
    private javax.swing.JCheckBox useFactionModifiersCheckBox;
    private javax.swing.JCheckBox useFactionForNamesBox;
    private javax.swing.JCheckBox useTacticsBox;
    private javax.swing.JCheckBox useInitBonusBox;
    private javax.swing.JCheckBox useToughnessBox;
    private javax.swing.JCheckBox useArtilleryBox;
    private javax.swing.JCheckBox useAbilitiesBox;
    private javax.swing.JCheckBox useQuirksBox;
    private javax.swing.JCheckBox useEdgeBox;
    private javax.swing.JCheckBox useImplantsBox;
    private javax.swing.JCheckBox payForPartsBox;
    private javax.swing.JCheckBox payForUnitsBox;
    private javax.swing.JCheckBox payForSalariesBox;
    private javax.swing.JCheckBox payForOverheadBox;
    private javax.swing.JCheckBox payForMaintainBox;
    private javax.swing.JCheckBox payForTransportBox;
    private javax.swing.JCheckBox sellUnitsBox;
    private javax.swing.JCheckBox sellPartsBox;
    
    private javax.swing.JTextArea textRanks;
    private javax.swing.JScrollPane scrRanks;
    
    private javax.swing.JTextArea textCustomRanks;
    private javax.swing.JCheckBox checkCustomRanks;
    private javax.swing.JButton testCustomRanks;
    private javax.swing.JScrollPane scrCustomRanks;
    private javax.swing.JComboBox choiceOfficerCut;
    private javax.swing.JLabel lblOfficerCut;
    
    private javax.swing.JTable tableXP;


    // End of variables declaration//GEN-END:variables

}
