/*
 * OrganizeTasksDialog.java
 *
 * Created on July 23, 2009, 1:04 PM
 */

package mekhq;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.TransferHandler;
import javax.swing.table.AbstractTableModel;
import mekhq.campaign.work.WorkItem;

/**
 *
 * @author  Jay Lawson <jaylawson39 at yahoo.com>
 */
public class OrganizeTasksDialog extends javax.swing.JDialog {

    AssignedTasksTableModel assignedTasksModel;
    
    
    /** Creates new form OrganizeTasksDialog */
    public OrganizeTasksDialog(java.awt.Frame parent, boolean modal, ArrayList<WorkItem> tasks) {
        super(parent, modal);
        assignedTasksModel = new AssignedTasksTableModel(tasks);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        assignedTasksTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        assignedTasksTable.setModel(assignedTasksModel);
        assignedTasksTable.setDragEnabled(true);
        assignedTasksTable.setName("assignedTasksTable"); // NOI18N
        //assignedTasksTable.setTransferHandler(new TableTransferHandler());
        jScrollPane1.setViewportView(assignedTasksTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(154, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                OrganizeTasksDialog dialog = new OrganizeTasksDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

/**
 * A table model for displaying work items assigned to a particular team
 */
public class AssignedTasksTableModel extends AbstractTableModel {

        public static final int NAME_INDEX = 0;
        public static final int TIME_INDEX = 1;
        public static final int TN_INDEX = 2;
        public static final int NUM_COLS = 3;
    
        private String[] columnNames = {"Name", "Time Left", "TN"};
        private Hashtable<Integer, WorkItem> tasks;
        private ArrayList<Integer> workQueue;
 
        public AssignedTasksTableModel(ArrayList<WorkItem> tasks) {
            super();
            this.tasks = new Hashtable<Integer, WorkItem>();
            workQueue = new ArrayList<Integer>();
            for(WorkItem task : tasks) {
                workQueue.add(task.getId());
                this.tasks.put(task.getId(), task);
            }
        }
        
        @Override
        public int getRowCount() {
            return workQueue.size();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public Object getValueAt(int row, int col) {
            WorkItem task = tasks.get(workQueue.get(row));
            switch (col) {
             case NAME_INDEX:
                return task.getName();
             case TIME_INDEX:
                return task.getTime();
             case TN_INDEX:
                return task.getAllMods().getValueAsString();
             default:
                return new Object();
         }
        }
        
        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }
    
        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
        
        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }   
        
        public ArrayList<Integer> getWorkQueue() {
            return workQueue;
        }
        
        //reorganize the queue based on a mover index moving to a target index
        public void resortQueue(int mover, int target) {
            if(target > getRowCount()) {
                return;
            }
            int i = 0;
            int moverId = workQueue.get(mover);
            int targetId = workQueue.get(target);
            ArrayList<Integer> newQueue = new ArrayList<Integer>();
            for(int id : workQueue) {
                if(i == mover) {
                    continue;
                }
                if(i == target) {
                    newQueue.add(moverId);
                }
                newQueue.add(id);
            }
            workQueue = newQueue;
        }
}

/*
 * TableTransferHandler.java is used by the 1.4 ExtendedDnDDemo.java example.
 */
//not operable, dont use this
class TableTransferHandler extends TransferHandler {
  private int row = -1;

  private int addIndex = -1; //Location where items were added

  private int addCount = 0; //Number of items added.

  @Override
  protected Transferable createTransferable(JComponent c) {
    return new StringSelection(exportString(c));
  }

  @Override
  public int getSourceActions(JComponent c) {
    return MOVE;
  }
  
  @Override
  protected void exportDone(JComponent c, Transferable data, int action) {
    //cleanup(c, action == MOVE);
  }
  
  @Override
  public boolean canImport(TransferHandler.TransferSupport sup) {
    /*
      for (int i = 0; i < flavors.length; i++) {
      if (DataFlavor.stringFlavor.equals(flavors[i])) {
        return true;
      }
    }
     * */
    return true;
  }
  
  @Override
  public boolean importData(JComponent c, Transferable t) {
      JTable target = (JTable) c;
      AssignedTasksTableModel model = (AssignedTasksTableModel) target.getModel();
      int index = target.getSelectedRow();
      model.resortQueue(row, index);
      return true;
    /*
      if (canImport(c, t.getTransferDataFlavors())) {
      try {
        String str = (String) t
            .getTransferData(DataFlavor.stringFlavor);
        importString(c, str);
        return true;
      } catch (UnsupportedFlavorException ufe) {
      } catch (IOException ioe) {
      }
    }

    return false;
     * */
  }
  
  protected String exportString(JComponent c) {
    JTable table = (JTable) c;
    row = table.getSelectedRow();
    return Integer.toString(row);
  }

  /*
  protected void importString(JComponent c, String str) {
    JTable target = (JTable) c;
    AssignedTasksTableModel model = (AssignedTasksTableModel) target.getModel();
    int index = target.getSelectedRow();

    //Prevent the user from dropping data back on itself.
    //For example, if the user is moving rows #4,#5,#6 and #7 and
    //attempts to insert the rows after row #5, this would
    //be problematic when removing the original rows.
    //So this is not allowed.
    if (rows != null && index >= rows[0] - 1
        && index <= rows[rows.length - 1]) {
      rows = null;
      return;
    }

    int max = model.getRowCount();
    if (index < 0) {
      index = max;
    } else {
      index++;
      if (index > max) {
        index = max;
      }
    }
    addIndex = index;
    String[] values = str.split("\n");
    addCount = values.length;
    int colCount = target.getColumnCount();
    for (int i = 0; i < values.length && i < colCount; i++) {
      //model.insertRow(index++, values[i].split(","));
    }
  }
   * */
/*
  protected void cleanup(JComponent c, boolean remove) {
    JTable source = (JTable) c;
    if (remove && rows != null) {
      AssignedTasksTableModel model = (AssignedTasksTableModel) source.getModel();

      //If we are moving items around in the same table, we
      //need to adjust the rows accordingly, since those
      //after the insertion point have moved.
      if (addCount > 0) {
        for (int i = 0; i < rows.length; i++) {
          if (rows[i] > addIndex) {
            rows[i] += addCount;
          }
        }
      }
      for (int i = rows.length - 1; i >= 0; i--) {
        //model.removeRow(rows[i]);
      }
    }
    rows = null;
    addCount = 0;
    addIndex = -1;
  }
 * */
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable assignedTasksTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
