/*
 * AmmoDialog.java
 *
 * Created on July 15, 2009, 2:56 PM
 */

package mekhq;

import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import megamek.common.Aero;
import megamek.common.AmmoType;
import megamek.common.Entity;
import megamek.common.Protomech;
import mekhq.campaign.work.ReloadItem;

/**
 *
 * @author  Jay Lawson <jaylawson39 at yahoo.com>
 */
public class AmmoDialog extends javax.swing.JDialog {

    private Vector<AmmoType> atypes;
    private ReloadItem reload;
    private DefaultComboBoxModel ammoChoiceModel;
    private Entity entity;
    
    /** Creates new form AmmoDialog */
    public AmmoDialog(java.awt.Frame parent, boolean modal, ReloadItem r, Entity en) {
        super(parent, modal);
        this.reload = r;
        this.entity = en;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ammoChoice = new javax.swing.JComboBox();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        setupMunitions();
        ammoChoice.setModel(ammoChoiceModel);
        ammoChoice.setName("ammoChoice"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mekhq.MekHQApp.class).getContext().getResourceMap(AmmoDialog.class);
        okBtn.setText(resourceMap.getString("okBtn.text")); // NOI18N
        okBtn.setName("okBtn"); // NOI18N
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText(resourceMap.getString("cancelBtn.text")); // NOI18N
        cancelBtn.setName("cancelBtn"); // NOI18N
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(ammoChoice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 246, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(okBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelBtn)
                        .add(50, 50, 50))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(ammoChoice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelBtn)
                    .add(okBtn))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
    this.setVisible(false);
}//GEN-LAST:event_cancelBtnActionPerformed

private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
    reload.swapAmmo(atypes.elementAt(ammoChoice.getSelectedIndex()));
    this.setVisible(false);
}//GEN-LAST:event_okBtnActionPerformed

private void setupMunitions() {
    ammoChoiceModel = new DefaultComboBoxModel();
    atypes = new Vector<AmmoType>();
    AmmoType cur_atype = reload.getAmmoType();
    for(AmmoType atype : AmmoType.getMunitionsFor(reload.getAmmoType().getAmmoType())) {
        //this is an abbreviated version of setupMunitions in the CustomMechDialog
        
        //TODO: clan/IS limitations?
        
        if ((entity instanceof Aero)
                    && !((atype.getAmmoType() == AmmoType.T_MML)
                            || (atype.getAmmoType() == AmmoType.T_ATM)
                            || (atype.getAmmoType() == AmmoType.T_NARC) 
                            || (atype.getAmmoType() == AmmoType.T_AC_LBX))) {
            continue;
        }
        
        // Only Protos can use Proto-specific ammo
        if (atype.hasFlag(AmmoType.F_PROTOMECH)
                        && !(entity instanceof Protomech)) {
            continue;
        }

        // When dealing with machine guns, Protos can only
        // use proto-specific machine gun ammo
        if ((entity instanceof Protomech)
                        && atype.hasFlag(AmmoType.F_MG)
                        && !atype.hasFlag(AmmoType.F_PROTOMECH)) {
            continue;
        }

        // Battle Armor ammo can't be selected at all.
        // All other ammo types need to match on rack size and tech.
        if ((atype.getRackSize() == cur_atype.getRackSize())
                        && (atype.hasFlag(AmmoType.F_BATTLEARMOR) == cur_atype.hasFlag(AmmoType.F_BATTLEARMOR))
                        && (atype.hasFlag(AmmoType.F_ENCUMBERING) == cur_atype.hasFlag(AmmoType.F_ENCUMBERING))
                        && (atype.getTonnage(entity) == cur_atype.getTonnage(entity))) {
            atypes.add(atype);
            ammoChoiceModel.addElement(atype.getDesc());
        }
    }
}
        
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AmmoDialog dialog = new AmmoDialog(new javax.swing.JFrame(), true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ammoChoice;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton okBtn;
    // End of variables declaration//GEN-END:variables

}
