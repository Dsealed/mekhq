/*
 * UnitSelectorDialog.java
 *
 * Created on August 21, 2009, 4:26 PM
 */

package mekhq.gui.dialog;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.ResourceBundle;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;

import megamek.client.ui.Messages;
import megamek.client.ui.swing.AdvancedSearchDialog;
import megamek.client.ui.swing.MechTileset;
import megamek.client.ui.swing.MechView;
import megamek.common.Entity;
import megamek.common.EntityWeightClass;
import megamek.common.MechFileParser;
import megamek.common.MechSearchFilter;
import megamek.common.MechSummary;
import megamek.common.MechSummaryCache;
import megamek.common.TechConstants;
import megamek.common.UnitType;
import megamek.common.loaders.EntityLoadingException;
import mekhq.MekHQ;
import mekhq.campaign.Campaign;
import mekhq.gui.CampaignGUI;

/**
 *
 * @author  Jay Lawson <jaylawson39 at yahoo.com>
 * (code borrowed heavily from MegaMekLab UnitSelectorDialog
 */
public class UnitSelectorDialog extends JDialog {
	private static final long serialVersionUID = 304389003995743004L;

	private MechSummary[] mechs;

    private MechTableModel unitModel;

    private static MechTileset mt;

    Entity selectedUnit = null;

    private TableRowSorter<MechTableModel> sorter;

    private Campaign campaign;
    
    private CampaignGUI hqView;
    
    private DecimalFormat formatter;
    
    private MechSearchFilter searchFilter;
    AdvancedSearchDialog asd;


    /** Creates new form UnitSelectorDialog */
    public UnitSelectorDialog(boolean modal, CampaignGUI view) {
        super(view.getFrame(), modal);
        unitModel = new MechTableModel();
        initComponents();
        this.hqView = view;
        this.campaign = hqView.getCampaign();
        formatter = new DecimalFormat();
        asd = new AdvancedSearchDialog(view.getFrame());

        
        MechSummary [] allMechs = MechSummaryCache.getInstance().getAllMechs();
        setMechs(allMechs);
        setLocationRelativeTo(view.getFrame());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scrTableUnits = new javax.swing.JScrollPane();
        tableUnits = new javax.swing.JTable();
        scrTxtUnitView = new javax.swing.JScrollPane();
        txtUnitView = new javax.swing.JTextPane();
        panelFilterBtns = new javax.swing.JPanel();
        panelLeft = new javax.swing.JPanel();
        lblWeight = new javax.swing.JLabel();
        comboWeight = new javax.swing.JComboBox();
        lblUnitType = new javax.swing.JLabel();
        comboUnitType = new javax.swing.JComboBox();
        txtFilter = new javax.swing.JTextField();
        lblFilter = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        panelOKBtns = new javax.swing.JPanel();
        btnBuy = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnAdvSearch = new JButton();
        btnResetSearch = new JButton();
        panelSearchBtns = new JPanel();

		ResourceBundle resourceMap = ResourceBundle.getBundle("mekhq.resources.UnitSelectorDialog");
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        getContentPane().setLayout(new BorderLayout());

        panelFilterBtns.setName("panelFilterBtns"); // NOI18N
        panelFilterBtns.setLayout(new java.awt.GridBagLayout());

        lblUnitType.setText(resourceMap.getString("lblUnitType.text")); // NOI18N
        lblUnitType.setName("lblUnitType"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelFilterBtns.add(lblUnitType, gridBagConstraints);

        DefaultComboBoxModel unitTypeModel = new DefaultComboBoxModel();
        for (int i = 0; i < UnitType.SIZE; i++) {
            unitTypeModel.addElement(UnitType.getTypeDisplayableName(i));
        }
        unitTypeModel.setSelectedItem(UnitType.getTypeName(UnitType.MEK));
        comboUnitType.setModel(unitTypeModel);
        comboUnitType.setMinimumSize(new java.awt.Dimension(200, 27));
        comboUnitType.setName("comboUnitType"); // NOI18N
        comboUnitType.setPreferredSize(new java.awt.Dimension(200, 27));
        comboUnitType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboUnitTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelFilterBtns.add(comboUnitType, gridBagConstraints);

        lblWeight.setText(resourceMap.getString("lblWeight.text")); // NOI18N
        lblWeight.setName("lblWeight"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelFilterBtns.add(lblWeight, gridBagConstraints);

        DefaultComboBoxModel weightModel = new DefaultComboBoxModel();
        for (int i = 0; i < EntityWeightClass.SIZE; i++) {
            weightModel.addElement(EntityWeightClass.getClassName(i));
        }
        weightModel.addElement("All");
        weightModel.setSelectedItem(EntityWeightClass.getClassName(EntityWeightClass.WEIGHT_LIGHT));
        comboWeight.setModel(weightModel);
        comboWeight.setMinimumSize(new java.awt.Dimension(200, 27));
        comboWeight.setName("comboWeight"); // NOI18N
        comboWeight.setPreferredSize(new java.awt.Dimension(200, 27));
        comboWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboWeightActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelFilterBtns.add(comboWeight, gridBagConstraints);

        txtFilter.setText(resourceMap.getString("txtFilter.text")); // NOI18N
        txtFilter.setMinimumSize(new java.awt.Dimension(200, 28));
        txtFilter.setName("txtFilter"); // NOI18N
        txtFilter.setPreferredSize(new java.awt.Dimension(200, 28));
        txtFilter.getDocument().addDocumentListener(
            new DocumentListener() {
                public void changedUpdate(DocumentEvent e) {
                    filterUnits();
                }
                public void insertUpdate(DocumentEvent e) {
                    filterUnits();
                }
                public void removeUpdate(DocumentEvent e) {
                    filterUnits();
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelFilterBtns.add(txtFilter, gridBagConstraints);
        
        lblFilter.setText(resourceMap.getString("lblFilter.text")); // NOI18N
        lblFilter.setName("lblFilter"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelFilterBtns.add(lblFilter, gridBagConstraints);
        
        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.setText(resourceMap.getString("lblImage.text")); // NOI18N
        lblImage.setName("lblImage"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelFilterBtns.add(lblImage, gridBagConstraints);
      
        panelSearchBtns.setLayout(new GridBagLayout());

        btnAdvSearch.setText(Messages.getString("MechSelectorDialog.AdvSearch")); //$NON-NLS-1$
        btnAdvSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	searchFilter = asd.showDialog();
                btnResetSearch.setEnabled(searchFilter!=null);
                filterUnits();
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        panelSearchBtns.add(btnAdvSearch, gridBagConstraints);

        btnResetSearch.setText(Messages.getString("MechSelectorDialog.Reset")); //$NON-NLS-1$
        btnResetSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	asd.clearValues();
                searchFilter=null;
                btnResetSearch.setEnabled(false);
                filterUnits();
            }
        });
        btnResetSearch.setEnabled(false);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        panelSearchBtns.add(btnResetSearch, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        panelFilterBtns.add(panelSearchBtns, gridBagConstraints);

        
        scrTableUnits.setMinimumSize(new java.awt.Dimension(500, 400));
        scrTableUnits.setName("scrTableUnits"); // NOI18N
        scrTableUnits.setPreferredSize(new java.awt.Dimension(500, 400));

        tableUnits.setFont(Font.decode(resourceMap.getString("tableUnits.font"))); // NOI18N
        tableUnits.setModel(unitModel);
        tableUnits.setName("tableUnits"); // NOI18N
        tableUnits.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sorter = new TableRowSorter<MechTableModel>(unitModel);
        tableUnits.setRowSorter(sorter);
        tableUnits.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                UnitChanged(evt);
            }
        });
        TableColumn column = null;
        for (int i = 0; i < MechTableModel.N_COL; i++) {
            column = tableUnits.getColumnModel().getColumn(i);
            if (i == MechTableModel.COL_CHASSIS) {
                column.setPreferredWidth(125);
            }
            else if(i == MechTableModel.COL_MODEL
                || i == MechTableModel.COL_COST) {
                column.setPreferredWidth(75);
            }
            else if(i == MechTableModel.COL_WEIGHT
                || i == MechTableModel.COL_BV) {
                column.setPreferredWidth(50);
            }
            else {
                column.setPreferredWidth(25);
            }
            column.setCellRenderer(unitModel.getRenderer());

        }
        scrTableUnits.setViewportView(tableUnits);

        scrTxtUnitView.setName("scrTxtUnitView"); // NOI18N
        txtUnitView.setBorder(null);
        txtUnitView.setContentType(resourceMap.getString("txtUnitView.contentType")); // NOI18N
        txtUnitView.setEditable(false);
        txtUnitView.setFont(Font.decode(resourceMap.getString("txtUnitView.font"))); // NOI18N
        txtUnitView.setMinimumSize(new java.awt.Dimension(300, 500));
        txtUnitView.setName("txtUnitView"); // NOI18N
        txtUnitView.setPreferredSize(new java.awt.Dimension(300, 500));
        scrTxtUnitView.setViewportView(txtUnitView);
 
        panelLeft.setLayout(new BorderLayout());
        panelLeft.add(panelFilterBtns, BorderLayout.PAGE_START);
        panelLeft.add(scrTableUnits, BorderLayout.CENTER);
        
        splitMain = new javax.swing.JSplitPane(javax.swing.JSplitPane.HORIZONTAL_SPLIT,panelLeft, scrTxtUnitView);
        splitMain.setOneTouchExpandable(true);
        splitMain.setResizeWeight(0.0);
        getContentPane().add(splitMain, BorderLayout.CENTER);
          
        panelOKBtns.setName("panelOKBtns"); // NOI18N
        panelOKBtns.setLayout(new java.awt.GridBagLayout());

        btnBuy.setText(resourceMap.getString("btnBuy.text")); // NOI18N
        btnBuy.setName("btnBuy"); // NOI18N
        btnBuy.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		btnBuyActionPerformed(evt);
        	}
        });
        panelOKBtns.add(btnBuy, new java.awt.GridBagConstraints());

        btnClose.setText(resourceMap.getString("btnClose.text")); // NOI18N
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		btnCloseActionPerformed(evt);
        	}
        });
        panelOKBtns.add(btnClose, new java.awt.GridBagConstraints());

        getContentPane().add(panelOKBtns, BorderLayout.PAGE_END);

        pack();
    }

	private void comboUnitTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboUnitTypeActionPerformed
	    filterUnits();
	}
	
	private void comboWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboWeightActionPerformed
	    filterUnits();
	}

	private void btnBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyActionPerformed
	    Entity en = getSelectedEntity();
	    if(null != en) {
	        campaign.buyUnit(en);
	        hqView.refreshUnitList();
	        hqView.refreshServicedUnitList();
	        hqView.refreshFinancialTransactions();
	        hqView.refreshReport();
	    }
	    // Necessary if the used wants to buy the same unit twice without reselecting it
	    UnitChanged(null);
	}//GEN-LAST:event_btnBuyActionPerformed
	
	private void btnBuySelectActionPerformed(java.awt.event.ActionEvent evt) {                                       
	    setVisible(false);
	}
	
	private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
	    selectedUnit = null;
	    setVisible(false);
	}//GEN-LAST:event_btnCloseActionPerformed
	
    private void filterUnits() {
        RowFilter<MechTableModel, Integer> unitTypeFilter = null;
        final int nClass = comboWeight.getSelectedIndex();
        final int nUnit = comboUnitType.getSelectedIndex();
        final int year = campaign.getCalendar().get(GregorianCalendar.YEAR);
        //If current expression doesn't parse, don't update.
        try {
            unitTypeFilter = new RowFilter<MechTableModel,Integer>() {
                @Override
                public boolean include(Entry<? extends MechTableModel, ? extends Integer> entry) {
                    MechTableModel mechModel = entry.getModel();
                    MechSummary mech = mechModel.getMechSummary(entry.getIdentifier());
                if (
                /*year limits*/
                (!campaign.getCampaignOptions().limitByYear() || mech.getYear() <= year) &&
                /*Clan/IS limits*/
                (campaign.getCampaignOptions().allowClanPurchases() || !TechConstants.isClan(mech.getType())) &&
                (campaign.getCampaignOptions().allowISPurchases() || TechConstants.isClan(mech.getType())) &&
                /* Canon */
                (mech.isCanon() || !campaign.getCampaignOptions().allowCanonOnly()) &&
                /* Weight */
                (mech.getWeightClass() == nClass || nClass == EntityWeightClass.SIZE) &&             
                /* Technology Level */
                campaign.getCampaignOptions().getTechLevel() >= (Integer.parseInt(TechConstants.T_SIMPLE_LEVEL[mech.getType()])-2) &&        
                /*Unit type*/
                 ((nUnit == UnitType.SIZE) || mech.getUnitType().equals(UnitType.getTypeName(nUnit))) &&
                 ((searchFilter==null) || MechSearchFilter.isMatch(mech, searchFilter))) {
                	if(txtFilter.getText().length() > 0) {
                        String text = txtFilter.getText();
                        return mech.getName().toLowerCase().contains(text.toLowerCase());
                    }
                    return true;
                }
                return false;
                }
            };
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(unitTypeFilter);
    }

    private void UnitChanged(javax.swing.event.ListSelectionEvent evt) {
        int view = tableUnits.getSelectedRow();
        if(view < 0) {
            //selection got filtered away
            selectedUnit = null;
            refreshUnitView();
            return;
        }
        int selected = tableUnits.convertRowIndexToModel(view);
        // else
        MechSummary ms = mechs[selected];
        try {
             // For some unknown reason the base path gets screwed up after you
             // print so this sets the source file to the full path.
             Entity entity = new MechFileParser(ms.getSourceFile(), ms.getEntryName()).getEntity();
             selectedUnit = entity;
             refreshUnitView();
        } catch (EntityLoadingException ex) {
            selectedUnit = null;
            MekHQ.logError("Unable to load mech: " + ms.getSourceFile() + ": " + ms.getEntryName() + ": " + ex.getMessage());
            MekHQ.logError(ex);
            refreshUnitView();
            return;
       }
    }

     void refreshUnitView() {

        boolean populateTextFields = true;

        // null entity, so load a default unit.
        if (selectedUnit == null) {
            txtUnitView.setText("");
            lblImage.setIcon(null);
            return;
        }

        MechView mechView = null;
        try {
            mechView = new MechView(selectedUnit, true);
        } catch (Exception e) {
            // error unit didn't load right. this is bad news.
            populateTextFields = false;
        }
        txtUnitView.setEditable(false);
        if (populateTextFields && (mechView != null)) {
            txtUnitView.setText(mechView.getMechReadout());
        } else {
            txtUnitView.setText("No Unit Selected");
        }
        txtUnitView.setCaretPosition(0);

        if (mt == null) {
            mt = new MechTileset("data/images/units/");
            try {
                mt.loadFromFile("mechset.txt");
            } catch (IOException ex) {
            	MekHQ.logError(ex);
                //TODO: do something here
                return;
            }
        }// end if(null tileset)
        Image unitImage = mt.imageFor(selectedUnit, lblImage, -1);
        if(null != unitImage) {
            lblImage.setIcon(new ImageIcon(unitImage));
        }
    }

     public Entity getSelectedEntity() {
        return selectedUnit;

    }

     public void setMechs (MechSummary [] m) {
         this.mechs = m;

         // break out if there are no units to filter
         if (mechs == null) {
             System.err.println("No units to filter!");
         } else {
             unitModel.setData(mechs);
         }
         filterUnits();
     }

     public void restrictToChassis (String chassis) {
         ArrayList<MechSummary> allowedMechs = new ArrayList<MechSummary>();
         for (MechSummary mechSummary : mechs) {
             if (mechSummary.getChassis().equals(chassis))
                 allowedMechs.add(mechSummary);
         }
         setMechs(allowedMechs.toArray(new MechSummary[0]));
     }

     public void restrictToYear (int year) {
         ArrayList<MechSummary> allowedMechs = new ArrayList<MechSummary>();
         for (MechSummary mechSummary : mechs) {
             if (mechSummary.getYear()<=year)
                 allowedMechs.add(mechSummary);
         }
         setMechs(allowedMechs.toArray(new MechSummary[0]));
     }

    public void changeBuyBtnToSelectBtn () {
        for (ActionListener actionListener : btnBuy.getActionListeners()) {
            btnBuy.removeActionListener(actionListener);
        }

        ResourceBundle resourceMap = ResourceBundle.getBundle("UnitSelectorDialog");
        btnBuy.setText(resourceMap.getString("btnBuy.textSelect")); // NOI18N

        btnBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuySelectActionPerformed(evt);
            }
        });
    }

    public JComboBox getComboUnitType() {
        return comboUnitType;
    }

    public JComboBox getComboWeight() {
        return comboWeight;
    }


    /**
	 * A table model for displaying work items
	 */
	public class MechTableModel extends AbstractTableModel {
			private static final long serialVersionUID = 8472587304279640434L;
			private final static int COL_MODEL = 0;
	        private final static int COL_CHASSIS = 1;
	        private final static int COL_WEIGHT = 2;
	        private final static int COL_BV = 3;
	        private final static int COL_YEAR = 4;
	        private final static int COL_COST = 5;
	        private final static int N_COL = 6;
	
	        private MechSummary[] data = new MechSummary[0];
	
	        public MechTableModel() {
	            //this.columnNames = new String[] {"Model", "Chassis"};
	            //this.data = new MechSummary[0];
	        }
	
	        public int getRowCount() {
	            return data.length;
	        }
	
	        public int getColumnCount() {
	            return N_COL;
	        }
	
	        public int getAlignment(int col) {
	            switch(col) {
	            case COL_MODEL:
	            case COL_CHASSIS:
	            	return SwingConstants.LEFT;
	            default:
	            	return SwingConstants.RIGHT;
	            }
	        }
	        
	        @Override
	        public String getColumnName(int column) {
	            switch(column) {
	                case COL_MODEL:
	                    return "Model";
	                case COL_CHASSIS:
	                    return "Chassis";
	                case COL_WEIGHT:
	                    return "Weight";
	                case COL_BV:
	                    return "BV";
	                case COL_YEAR:
	                    return "Year";
	                case COL_COST:
	                    return "Price";
	                default:
	                    return "?";
	            }
	        }
	
	        @Override
	        public Class<? extends Object> getColumnClass(int c) {
	            return getValueAt(0, c).getClass();
	        }
	
	        @Override
	        public boolean isCellEditable(int row, int col) {
	            return false;
	        }
	
	        public MechSummary getMechSummary(int i) {
	            return data[i];
	        }
	
	        //fill table with values
	        public void setData(MechSummary[] ms) {
	            data = ms;
	            fireTableDataChanged();
	        }
	
	        public Object getValueAt(int row, int col) {
	            MechSummary ms = data[row];
	            if(col == COL_MODEL) {
	                return ms.getModel();
	            }
	            if(col == COL_CHASSIS) {
	                return ms.getChassis();
	            }
	            if(col == COL_WEIGHT) {
	                return ms.getTons();
	            }
	            if(col == COL_BV) {
	                return ms.getBV();
	            }
	            if(col == COL_YEAR) {
	                return ms.getYear();
	            }
	            if(col == COL_COST) {
	                return formatter.format(getPurchasePrice(ms));
	            }
	            return "?";
	        }
	        
	        private int getPurchasePrice(MechSummary ms) {
	        	int cost = ms.getCost();
	        	if(TechConstants.isClan(ms.getType())) {
	        		cost *= campaign.getCampaignOptions().getClanPriceModifier();
	        	}
	        	return cost;
	        }
	        
	        public MechTableModel.Renderer getRenderer() {
				return new MechTableModel.Renderer();
			}

			public class Renderer extends DefaultTableCellRenderer {

				private static final long serialVersionUID = 9054581142945717303L;

				public Component getTableCellRendererComponent(JTable table,
						Object value, boolean isSelected, boolean hasFocus,
						int row, int column) {
					super.getTableCellRendererComponent(table, value, isSelected,
							hasFocus, row, column);
					setOpaque(true);
					int actualCol = table.convertColumnIndexToModel(column);
					setHorizontalAlignment(getAlignment(actualCol));
					
					return this;
				}

			}
	
	}
	
	@Override
    public void setVisible(boolean visible) {
        asd.clearValues();
        searchFilter=null;
        filterUnits();
        super.setVisible(visible);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnClose;
    private javax.swing.JComboBox comboUnitType;
    private javax.swing.JComboBox comboWeight;
    private javax.swing.JLabel lblFilter;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblUnitType;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JPanel panelFilterBtns;
    private javax.swing.JPanel panelOKBtns;
    private javax.swing.JPanel panelLeft;
    private javax.swing.JScrollPane scrTableUnits;
    private javax.swing.JScrollPane scrTxtUnitView;
    private javax.swing.JTable tableUnits;
    private javax.swing.JTextField txtFilter;
    private javax.swing.JTextPane txtUnitView;
    private javax.swing.JSplitPane splitMain;
    private JButton btnAdvSearch;
    private JButton btnResetSearch;
    private JPanel panelSearchBtns;
    // End of variables declaration//GEN-END:variables

}
