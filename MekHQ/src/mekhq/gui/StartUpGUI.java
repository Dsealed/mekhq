/*
 * StartUpDialog.java
 *
 * Created on Jan 6, 2010, 10:46:02 PM
 */

package mekhq.gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ResourceBundle;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.filechooser.FileFilter;

import mekhq.MekHQ;
import mekhq.gui.dialog.DataLoadingDialog;
/**
 *
 * @author Jay
 */
public class StartUpGUI extends javax.swing.JPanel {

	
	private static final long serialVersionUID = 8376874926997734492L;
	MekHQ app;
	JFrame frame;
    
	public StartUpGUI(MekHQ app) {
        this.app = app;
        initComponents();      
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

    	frame = new JFrame("MekHQ");
        
        ResourceBundle resourceMap = ResourceBundle.getBundle("mekhq.resources.StartUpDialog");
        
        btnNewGame = new javax.swing.JButton(resourceMap.getString("btnNewGame.text"));
        btnNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	loadCampaign(false);  	
            }
        });
        btnLoadGame = new javax.swing.JButton(resourceMap.getString("btnLoadGame.text"));
        btnLoadGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	loadCampaign(true);  	
            }
        });
        btnQuit = new javax.swing.JButton(resourceMap.getString("btnQuit.text"));
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                System.exit(0);
            }
        });
        
        // initialize splash image
        Image imgSplash = getToolkit().getImage("data/images/misc/mekhq-splash.jpg"); //$NON-NLS-1$

        // wait for splash image to load completely
        MediaTracker tracker = new MediaTracker(frame);
        tracker.addImage(imgSplash, 0);
        try {
            tracker.waitForID(0);
        } catch (InterruptedException e) {
            // really should never come here
        }
        // make splash image panel
        ImageIcon icon = new ImageIcon(imgSplash);
        GridBagLayout gridbag = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        setLayout(gridbag);
        c.anchor = GridBagConstraints.NORTHWEST;
        c.insets = new Insets(5, 5, 5, 5);
        c.gridx = 0;
        c.gridy = 0;
        c.fill = GridBagConstraints.NONE;
        c.weightx = 0.0;
        c.weighty = 0.0;
        c.gridwidth = 1;
        c.gridheight = 3;
        add(new JLabel(icon), c);
        c.gridx = 1;
        c.gridheight = 1;
        c.weightx = 1.0;
        c.weighty = 1.0;
        c.fill = GridBagConstraints.BOTH;
        c.anchor = GridBagConstraints.NORTHWEST;
        c.gridy = 0;
        add(btnNewGame,c);
        c.gridy++;
        add(btnLoadGame,c);
        c.gridy++;
        add(btnQuit,c);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
	    
        frame.setSize(600, 300);
        
	    // Determine the new location of the window
	    int w = frame.getSize().width;
	    int h = frame.getSize().height;
	    int x = (dim.width-w)/2;
	    int y = (dim.height-h)/2;
	    
	    // Move the window
	    frame.setLocation(x, y);
	    
        frame.getContentPane().setLayout(new BorderLayout());
        frame.getContentPane().add(this, BorderLayout.CENTER);
        frame.validate();
        
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                frame.setVisible(false);
                System.exit(0);
            }
        });
        frame.setVisible(true);
    }

    private void loadCampaign(boolean loadCampaign) {
    	File f = null;
    	if(loadCampaign) {
    		f = selectLoadCampaignFile();
    		if(null == f) {
    			return;
    		}
    	}
    	DataLoadingDialog dataLoadingDialog = new DataLoadingDialog(app, frame, f);   	
    	dataLoadingDialog.setVisible(true);
    }
    
    private File selectLoadCampaignFile() {
		JFileChooser loadCpgn = new JFileChooser(".");
		loadCpgn.setDialogTitle("Load Campaign");
		loadCpgn.setFileFilter(new ExtFileFilter(".xml"));
		int returnVal = loadCpgn.showOpenDialog(frame);

		if ((returnVal != JFileChooser.APPROVE_OPTION)
				|| (loadCpgn.getSelectedFile() == null)) {
			// I want a file, y'know!
			return null;
		}
		
		File file = loadCpgn.getSelectedFile();

		return file;
	}
    
    class ExtFileFilter extends FileFilter {
		private String useExt = null;

		public ExtFileFilter(String ext) {
			useExt = ext;
		}

		@Override
		public boolean accept(File dir) {
			if (dir.isDirectory()) {
				return true;
			}
			return dir.getName().endsWith(useExt);
		}

		@Override
		public String getDescription() {
			return "campaign file (" + useExt + ")";
		}
	}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewGame;
    private javax.swing.JButton btnLoadGame;
    private javax.swing.JButton btnQuit;
    // End of variables declaration//GEN-END:variables
}
